instruction memory:
	instrMem[ 0 ] = 0x00800004 ( lw 0 0 4 )
	instrMem[ 1 ] = 0x01010001 ( beq 0 1 1 )
	instrMem[ 2 ] = 0x00010001 ( add 0 1 1 )
	instrMem[ 3 ] = 0x01800000 ( halt )
	instrMem[ 4 ] = 0x00000001 ( add 0 0 1 )

@@@
state before cycle 0 starts:
	pc = 0
	data memory:
		dataMem[ 0 ] = 0x00800004
		dataMem[ 1 ] = 0x01010001
		dataMem[ 2 ] = 0x00010001
		dataMem[ 3 ] = 0x01800000
		dataMem[ 4 ] = 0x00000001
	registers:
		reg[ 0 ] = 0
		reg[ 1 ] = 0
		reg[ 2 ] = 0
		reg[ 3 ] = 0
		reg[ 4 ] = 0
		reg[ 5 ] = 0
		reg[ 6 ] = 0
		reg[ 7 ] = 0
	IF/ID pipeline register:
		instruction = 0x01C00000 ( noop )
		pcPlus1 = 0 (Don't Care)
	ID/EX pipeline register:
		instruction = 0x01C00000 ( noop )
		pcPlus1 = 0 (Don't Care)
		readRegA = 0 (Don't Care)
		readRegB = 0 (Don't Care)
		offset = 0 (Don't Care)
	EX/MEM pipeline register:
		instruction = 0x01C00000 ( noop )
		branchTarget 0 (Don't Care)
		eq ? False (Don't Care)
		aluResult = 0 (Don't Care)
		readRegB = 0 (Don't Care)
	MEM/WB pipeline register:
		instruction = 0x01C00000 ( noop )
		writeData = 0 (Don't Care)
	WB/END pipeline register:
		instruction = 0x01C00000 ( noop )
		writeData = 0 (Don't Care)
end state

@@@
state before cycle 1 starts:
	pc = 1
	data memory:
		dataMem[ 0 ] = 0x00800004
		dataMem[ 1 ] = 0x01010001
		dataMem[ 2 ] = 0x00010001
		dataMem[ 3 ] = 0x01800000
		dataMem[ 4 ] = 0x00000001
	registers:
		reg[ 0 ] = 0
		reg[ 1 ] = 0
		reg[ 2 ] = 0
		reg[ 3 ] = 0
		reg[ 4 ] = 0
		reg[ 5 ] = 0
		reg[ 6 ] = 0
		reg[ 7 ] = 0
	IF/ID pipeline register:
		instruction = 0x00800004 ( lw 0 0 4 )
		pcPlus1 = 1
	ID/EX pipeline register:
		instruction = 0x01C00000 ( noop )
		pcPlus1 = 0 (Don't Care)
		readRegA = 0 (Don't Care)
		readRegB = 0 (Don't Care)
		offset = 0 (Don't Care)
	EX/MEM pipeline register:
		instruction = 0x01C00000 ( noop )
		branchTarget 0 (Don't Care)
		eq ? True (Don't Care)
		aluResult = 0 (Don't Care)
		readRegB = 0 (Don't Care)
	MEM/WB pipeline register:
		instruction = 0x01C00000 ( noop )
		writeData = 0 (Don't Care)
	WB/END pipeline register:
		instruction = 0x01C00000 ( noop )
		writeData = 0 (Don't Care)
end state

@@@
state before cycle 2 starts:
	pc = 2
	data memory:
		dataMem[ 0 ] = 0x00800004
		dataMem[ 1 ] = 0x01010001
		dataMem[ 2 ] = 0x00010001
		dataMem[ 3 ] = 0x01800000
		dataMem[ 4 ] = 0x00000001
	registers:
		reg[ 0 ] = 0
		reg[ 1 ] = 0
		reg[ 2 ] = 0
		reg[ 3 ] = 0
		reg[ 4 ] = 0
		reg[ 5 ] = 0
		reg[ 6 ] = 0
		reg[ 7 ] = 0
	IF/ID pipeline register:
		instruction = 0x01010001 ( beq 0 1 1 )
		pcPlus1 = 2
	ID/EX pipeline register:
		instruction = 0x00800004 ( lw 0 0 4 )
		pcPlus1 = 1
		readRegA = 0
		readRegB = 0 (Don't Care)
		offset = 4
	EX/MEM pipeline register:
		instruction = 0x01C00000 ( noop )
		branchTarget 0 (Don't Care)
		eq ? True (Don't Care)
		aluResult = 0 (Don't Care)
		readRegB = 0 (Don't Care)
	MEM/WB pipeline register:
		instruction = 0x01C00000 ( noop )
		writeData = 0 (Don't Care)
	WB/END pipeline register:
		instruction = 0x01C00000 ( noop )
		writeData = 0 (Don't Care)
end state

@@@
state before cycle 3 starts:
	pc = 2
	data memory:
		dataMem[ 0 ] = 0x00800004
		dataMem[ 1 ] = 0x01010001
		dataMem[ 2 ] = 0x00010001
		dataMem[ 3 ] = 0x01800000
		dataMem[ 4 ] = 0x00000001
	registers:
		reg[ 0 ] = 0
		reg[ 1 ] = 0
		reg[ 2 ] = 0
		reg[ 3 ] = 0
		reg[ 4 ] = 0
		reg[ 5 ] = 0
		reg[ 6 ] = 0
		reg[ 7 ] = 0
	IF/ID pipeline register:
		instruction = 0x01010001 ( beq 0 1 1 )
		pcPlus1 = 2
	ID/EX pipeline register:
		instruction = 0x01C00000 ( noop )
		pcPlus1 = 2 (Don't Care)
		readRegA = 0 (Don't Care)
		readRegB = 0 (Don't Care)
		offset = 0 (Don't Care)
	EX/MEM pipeline register:
		instruction = 0x00800004 ( lw 0 0 4 )
		branchTarget 5 (Don't Care)
		eq ? True (Don't Care)
		aluResult = 4
		readRegB = 0 (Don't Care)
	MEM/WB pipeline register:
		instruction = 0x01C00000 ( noop )
		writeData = 0 (Don't Care)
	WB/END pipeline register:
		instruction = 0x01C00000 ( noop )
		writeData = 0 (Don't Care)
end state

@@@
state before cycle 4 starts:
	pc = 3
	data memory:
		dataMem[ 0 ] = 0x00800004
		dataMem[ 1 ] = 0x01010001
		dataMem[ 2 ] = 0x00010001
		dataMem[ 3 ] = 0x01800000
		dataMem[ 4 ] = 0x00000001
	registers:
		reg[ 0 ] = 0
		reg[ 1 ] = 0
		reg[ 2 ] = 0
		reg[ 3 ] = 0
		reg[ 4 ] = 0
		reg[ 5 ] = 0
		reg[ 6 ] = 0
		reg[ 7 ] = 0
	IF/ID pipeline register:
		instruction = 0x00010001 ( add 0 1 1 )
		pcPlus1 = 3
	ID/EX pipeline register:
		instruction = 0x01010001 ( beq 0 1 1 )
		pcPlus1 = 2
		readRegA = 0
		readRegB = 0
		offset = 1
	EX/MEM pipeline register:
		instruction = 0x01C00000 ( noop )
		branchTarget 2 (Don't Care)
		eq ? True (Don't Care)
		aluResult = 0 (Don't Care)
		readRegB = 0 (Don't Care)
	MEM/WB pipeline register:
		instruction = 0x00800004 ( lw 0 0 4 )
		writeData = 1
	WB/END pipeline register:
		instruction = 0x01C00000 ( noop )
		writeData = 0 (Don't Care)
end state

@@@
state before cycle 5 starts:
	pc = 4
	data memory:
		dataMem[ 0 ] = 0x00800004
		dataMem[ 1 ] = 0x01010001
		dataMem[ 2 ] = 0x00010001
		dataMem[ 3 ] = 0x01800000
		dataMem[ 4 ] = 0x00000001
	registers:
		reg[ 0 ] = 1
		reg[ 1 ] = 0
		reg[ 2 ] = 0
		reg[ 3 ] = 0
		reg[ 4 ] = 0
		reg[ 5 ] = 0
		reg[ 6 ] = 0
		reg[ 7 ] = 0
	IF/ID pipeline register:
		instruction = 0x01800000 ( halt )
		pcPlus1 = 4
	ID/EX pipeline register:
		instruction = 0x00010001 ( add 0 1 1 )
		pcPlus1 = 3
		readRegA = 0
		readRegB = 0
		offset = 1 (Don't Care)
	EX/MEM pipeline register:
		instruction = 0x01010001 ( beq 0 1 1 )
		branchTarget 3
		eq ? False
		aluResult = 0 (Don't Care)
		readRegB = 0 (Don't Care)
	MEM/WB pipeline register:
		instruction = 0x01C00000 ( noop )
		writeData = 0 (Don't Care)
	WB/END pipeline register:
		instruction = 0x00800004 ( lw 0 0 4 )
		writeData = 1
end state

@@@
state before cycle 6 starts:
	pc = 5
	data memory:
		dataMem[ 0 ] = 0x00800004
		dataMem[ 1 ] = 0x01010001
		dataMem[ 2 ] = 0x00010001
		dataMem[ 3 ] = 0x01800000
		dataMem[ 4 ] = 0x00000001
	registers:
		reg[ 0 ] = 1
		reg[ 1 ] = 0
		reg[ 2 ] = 0
		reg[ 3 ] = 0
		reg[ 4 ] = 0
		reg[ 5 ] = 0
		reg[ 6 ] = 0
		reg[ 7 ] = 0
	IF/ID pipeline register:
		instruction = 0x00000001 ( add 0 0 1 )
		pcPlus1 = 5
	ID/EX pipeline register:
		instruction = 0x01800000 ( halt )
		pcPlus1 = 4
		readRegA = 1 (Don't Care)
		readRegB = 1 (Don't Care)
		offset = 0 (Don't Care)
	EX/MEM pipeline register:
		instruction = 0x00010001 ( add 0 1 1 )
		branchTarget 4 (Don't Care)
		eq ? False (Don't Care)
		aluResult = 1
		readRegB = 0 (Don't Care)
	MEM/WB pipeline register:
		instruction = 0x01010001 ( beq 0 1 1 )
		writeData = 0 (Don't Care)
	WB/END pipeline register:
		instruction = 0x01C00000 ( noop )
		writeData = 0 (Don't Care)
end state

@@@
state before cycle 7 starts:
	pc = 6
	data memory:
		dataMem[ 0 ] = 0x00800004
		dataMem[ 1 ] = 0x01010001
		dataMem[ 2 ] = 0x00010001
		dataMem[ 3 ] = 0x01800000
		dataMem[ 4 ] = 0x00000001
	registers:
		reg[ 0 ] = 1
		reg[ 1 ] = 0
		reg[ 2 ] = 0
		reg[ 3 ] = 0
		reg[ 4 ] = 0
		reg[ 5 ] = 0
		reg[ 6 ] = 0
		reg[ 7 ] = 0
	IF/ID pipeline register:
		instruction = 0x00000000 ( add 0 0 0 )
		pcPlus1 = 6
	ID/EX pipeline register:
		instruction = 0x00000001 ( add 0 0 1 )
		pcPlus1 = 5
		readRegA = 1
		readRegB = 1
		offset = 1 (Don't Care)
	EX/MEM pipeline register:
		instruction = 0x01800000 ( halt )
		branchTarget 4 (Don't Care)
		eq ? True (Don't Care)
		aluResult = 0 (Don't Care)
		readRegB = 1 (Don't Care)
	MEM/WB pipeline register:
		instruction = 0x00010001 ( add 0 1 1 )
		writeData = 1
	WB/END pipeline register:
		instruction = 0x01010001 ( beq 0 1 1 )
		writeData = 0 (Don't Care)
end state
Machine halted
Total of 8 cycles executed
Final state of machine:

@@@
state before cycle 8 starts:
	pc = 7
	data memory:
		dataMem[ 0 ] = 0x00800004
		dataMem[ 1 ] = 0x01010001
		dataMem[ 2 ] = 0x00010001
		dataMem[ 3 ] = 0x01800000
		dataMem[ 4 ] = 0x00000001
	registers:
		reg[ 0 ] = 1
		reg[ 1 ] = 1
		reg[ 2 ] = 0
		reg[ 3 ] = 0
		reg[ 4 ] = 0
		reg[ 5 ] = 0
		reg[ 6 ] = 0
		reg[ 7 ] = 0
	IF/ID pipeline register:
		instruction = 0x00000000 ( add 0 0 0 )
		pcPlus1 = 7
	ID/EX pipeline register:
		instruction = 0x00000000 ( add 0 0 0 )
		pcPlus1 = 6
		readRegA = 1
		readRegB = 1
		offset = 0 (Don't Care)
	EX/MEM pipeline register:
		instruction = 0x00000001 ( add 0 0 1 )
		branchTarget 6 (Don't Care)
		eq ? True (Don't Care)
		aluResult = 2
		readRegB = 1 (Don't Care)
	MEM/WB pipeline register:
		instruction = 0x01800000 ( halt )
		writeData = 0 (Don't Care)
	WB/END pipeline register:
		instruction = 0x00010001 ( add 0 1 1 )
		writeData = 1
end state
